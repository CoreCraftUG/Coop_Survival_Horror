//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Input/PlayerInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace CoreCraft.Input
{
    public partial class @PlayerInput : IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @PlayerInput()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInput"",
    ""maps"": [
        {
            ""name"": ""MenuMap"",
            ""id"": ""a4fab851-c41b-4b4a-b235-50a8e9e4e7bd"",
            ""actions"": [
                {
                    ""name"": ""SettingsTabLeft"",
                    ""type"": ""Button"",
                    ""id"": ""4e463ca2-594a-4b3d-9699-99324cdaedd0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SettingsTabRight"",
                    ""type"": ""Button"",
                    ""id"": ""b37fb6af-d932-4632-8db9-9d907eba06d7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Escape"",
                    ""type"": ""Button"",
                    ""id"": ""82ad53d2-1a7b-485e-81d7-daac712438bd"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""bed925f9-de89-4c34-8cb4-a0e86813c74f"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""SettingsTabLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""46c80550-071b-4a77-87c6-91c3ac03153a"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""SettingsTabRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""af7dc9eb-d205-4083-b55a-f427b25ba4a4"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Escape"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""PlayerMap"",
            ""id"": ""29784d00-4126-4c34-8898-25c87258164a"",
            ""actions"": [
                {
                    ""name"": ""Interact"",
                    ""type"": ""Button"",
                    ""id"": ""65e830db-edee-48dd-9a1f-e831bb3a069d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""f6f86b65-7217-4f6c-9a0c-040e8972cd36"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard"",
            ""bindingGroup"": ""Keyboard"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
            // MenuMap
            m_MenuMap = asset.FindActionMap("MenuMap", throwIfNotFound: true);
            m_MenuMap_SettingsTabLeft = m_MenuMap.FindAction("SettingsTabLeft", throwIfNotFound: true);
            m_MenuMap_SettingsTabRight = m_MenuMap.FindAction("SettingsTabRight", throwIfNotFound: true);
            m_MenuMap_Escape = m_MenuMap.FindAction("Escape", throwIfNotFound: true);
            // PlayerMap
            m_PlayerMap = asset.FindActionMap("PlayerMap", throwIfNotFound: true);
            m_PlayerMap_Interact = m_PlayerMap.FindAction("Interact", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }
        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }
        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // MenuMap
        private readonly InputActionMap m_MenuMap;
        private IMenuMapActions m_MenuMapActionsCallbackInterface;
        private readonly InputAction m_MenuMap_SettingsTabLeft;
        private readonly InputAction m_MenuMap_SettingsTabRight;
        private readonly InputAction m_MenuMap_Escape;
        public struct MenuMapActions
        {
            private @PlayerInput m_Wrapper;
            public MenuMapActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
            public InputAction @SettingsTabLeft => m_Wrapper.m_MenuMap_SettingsTabLeft;
            public InputAction @SettingsTabRight => m_Wrapper.m_MenuMap_SettingsTabRight;
            public InputAction @Escape => m_Wrapper.m_MenuMap_Escape;
            public InputActionMap Get() { return m_Wrapper.m_MenuMap; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(MenuMapActions set) { return set.Get(); }
            public void SetCallbacks(IMenuMapActions instance)
            {
                if (m_Wrapper.m_MenuMapActionsCallbackInterface != null)
                {
                    @SettingsTabLeft.started -= m_Wrapper.m_MenuMapActionsCallbackInterface.OnSettingsTabLeft;
                    @SettingsTabLeft.performed -= m_Wrapper.m_MenuMapActionsCallbackInterface.OnSettingsTabLeft;
                    @SettingsTabLeft.canceled -= m_Wrapper.m_MenuMapActionsCallbackInterface.OnSettingsTabLeft;
                    @SettingsTabRight.started -= m_Wrapper.m_MenuMapActionsCallbackInterface.OnSettingsTabRight;
                    @SettingsTabRight.performed -= m_Wrapper.m_MenuMapActionsCallbackInterface.OnSettingsTabRight;
                    @SettingsTabRight.canceled -= m_Wrapper.m_MenuMapActionsCallbackInterface.OnSettingsTabRight;
                    @Escape.started -= m_Wrapper.m_MenuMapActionsCallbackInterface.OnEscape;
                    @Escape.performed -= m_Wrapper.m_MenuMapActionsCallbackInterface.OnEscape;
                    @Escape.canceled -= m_Wrapper.m_MenuMapActionsCallbackInterface.OnEscape;
                }
                m_Wrapper.m_MenuMapActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @SettingsTabLeft.started += instance.OnSettingsTabLeft;
                    @SettingsTabLeft.performed += instance.OnSettingsTabLeft;
                    @SettingsTabLeft.canceled += instance.OnSettingsTabLeft;
                    @SettingsTabRight.started += instance.OnSettingsTabRight;
                    @SettingsTabRight.performed += instance.OnSettingsTabRight;
                    @SettingsTabRight.canceled += instance.OnSettingsTabRight;
                    @Escape.started += instance.OnEscape;
                    @Escape.performed += instance.OnEscape;
                    @Escape.canceled += instance.OnEscape;
                }
            }
        }
        public MenuMapActions @MenuMap => new MenuMapActions(this);

        // PlayerMap
        private readonly InputActionMap m_PlayerMap;
        private IPlayerMapActions m_PlayerMapActionsCallbackInterface;
        private readonly InputAction m_PlayerMap_Interact;
        public struct PlayerMapActions
        {
            private @PlayerInput m_Wrapper;
            public PlayerMapActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
            public InputAction @Interact => m_Wrapper.m_PlayerMap_Interact;
            public InputActionMap Get() { return m_Wrapper.m_PlayerMap; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(PlayerMapActions set) { return set.Get(); }
            public void SetCallbacks(IPlayerMapActions instance)
            {
                if (m_Wrapper.m_PlayerMapActionsCallbackInterface != null)
                {
                    @Interact.started -= m_Wrapper.m_PlayerMapActionsCallbackInterface.OnInteract;
                    @Interact.performed -= m_Wrapper.m_PlayerMapActionsCallbackInterface.OnInteract;
                    @Interact.canceled -= m_Wrapper.m_PlayerMapActionsCallbackInterface.OnInteract;
                }
                m_Wrapper.m_PlayerMapActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @Interact.started += instance.OnInteract;
                    @Interact.performed += instance.OnInteract;
                    @Interact.canceled += instance.OnInteract;
                }
            }
        }
        public PlayerMapActions @PlayerMap => new PlayerMapActions(this);
        private int m_KeyboardSchemeIndex = -1;
        public InputControlScheme KeyboardScheme
        {
            get
            {
                if (m_KeyboardSchemeIndex == -1) m_KeyboardSchemeIndex = asset.FindControlSchemeIndex("Keyboard");
                return asset.controlSchemes[m_KeyboardSchemeIndex];
            }
        }
        public interface IMenuMapActions
        {
            void OnSettingsTabLeft(InputAction.CallbackContext context);
            void OnSettingsTabRight(InputAction.CallbackContext context);
            void OnEscape(InputAction.CallbackContext context);
        }
        public interface IPlayerMapActions
        {
            void OnInteract(InputAction.CallbackContext context);
        }
    }
}
